version: '3.3'
volumes:
  static: {}
  database-data:

networks:
  backnet:
  frontnet:

services:
  db:
    container_name: 'PostgresSQL'
    platform: linux/x86_64
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backnet
    volumes:
      - database-data:/var/lib/postgresql/data/

  vpn_service:
    platform: linux/x86_64
    build: .
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      - SECRET_KEY=${SECRET_KEY}
    command:
      sh -c -m "./sh_scripts/migrate.sh && ./sh_scripts/start.sh"
#      sh -c -m "./sh_scripts/makemigrations.sh && ./sh_scripts/migrate.sh && ./sh_scripts/start.sh"
    volumes:
      - static:/usr/src/static
    depends_on:
      - db
    restart: always
    networks:
      - backnet
      - frontnet

  proxy:
    build: ./nginx_conf
    ports:
      - "8080:80"
    volumes:
      - static:/usr/src/static

    restart: always
    depends_on:
      - vpn_service
    networks:
      - frontnet
      - backnet

  bot_tg_client:
    build: ./bots/telegram_client_bot
    restart: always
    env_file: .env
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN_CLIENT}
      - USERNAME=${USERNAME_CLIENT}
      - PASSWORD=${PASSWORD_CLIENT}
    command:
      sh -c -m "./start_bot.sh"
    depends_on:
      - proxy
    networks:
      - frontnet
      - backnet

  bot_tg_admin:
    build: ./bots/telegram_admin_bot
    restart: always
    env_file: .env
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN_ADMIN}
      - USERNAME=${USERNAME_ADMIN}
      - PASSWORD=${PASSWORD_ADMIN}
    command:
      sh -c -m "./start_bot.sh"
    depends_on:
      - proxy
    networks:
      - frontnet
      - backnet